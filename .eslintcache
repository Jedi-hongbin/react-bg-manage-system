[{"/Users/hongbin/Code/React/bg-manage-system/src/index.tsx":"1","/Users/hongbin/Code/React/bg-manage-system/src/reportWebVitals.ts":"2","/Users/hongbin/Code/React/bg-manage-system/src/App.tsx":"3","/Users/hongbin/Code/React/bg-manage-system/src/components/UI/Card/index.tsx":"4","/Users/hongbin/Code/React/bg-manage-system/src/components/constants/styled.tsx":"5"},{"size":710,"mtime":1612148409509,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611986844456,"results":"8","hashOfConfig":"7"},{"size":2543,"mtime":1612168652541,"results":"9","hashOfConfig":"7"},{"size":2965,"mtime":1612167726460,"results":"10","hashOfConfig":"7"},{"size":446,"mtime":1612166751388,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ret1o3",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/hongbin/Code/React/bg-manage-system/src/index.tsx",[],["24","25"],"/Users/hongbin/Code/React/bg-manage-system/src/reportWebVitals.ts",[],"/Users/hongbin/Code/React/bg-manage-system/src/App.tsx",[],"/Users/hongbin/Code/React/bg-manage-system/src/components/UI/Card/index.tsx",["26"],"import React from \"react\";\nimport styled, { css, StyledComponent } from \"styled-components\";\nimport { AlignItems, JustifyContentProps } from \"../../../type\";\nimport {\n  Capitalize,\n  flexCenter,\n  Lowercase,\n  Uppercase,\n} from \"../../constants/styled\";\n\n// text-shadow: h-shadow x-shadow blur color\nconst textShadow = css`\n  text-shadow: 0px 0px 3px #000;\n`;\n\ntype handlePrototypeProps = ({\n  key,\n  def,\n  sameAttribute,\n}: {\n  key?: string;\n  def?: string;\n  sameAttribute?: string;\n}) => (props: { [any: string]: any }) => string;\n\nconst handlePrototype: handlePrototypeProps = ({ key, def, sameAttribute }) => (\n  props\n) => {\n  if (!!key && props[key]) {\n    return props[key];\n  }\n  if (!!sameAttribute) {\n    return props[sameAttribute] ?? props.theme.color.primary;\n  }\n  return props.theme.color.primary;\n};\n\ninterface RFCDivProps {\n  theme?: any;\n  className?: string;\n  content?: JustifyContentProps;\n  items?: AlignItems;\n  // [any: string]: any;\n}\n\nconst RFCDiv: React.FC<RFCDivProps> = (props) => (\n  <div className={props.className}>{props.children}</div>\n);\n\nexport const flexBoxDiv = styled(RFCDiv)`\n  display: flex;\n  justify-content: ${({ content }) => content};\n  align-items: ${({ items }) => items};\n`;\n\ntype ShadowViewProps = StyledComponent<\n  React.FC<RFCDivProps & { shadow?: string }>,\n  any,\n  {},\n  any\n>;\n// shadow attr: inset h-shadow x-shadow blur spread\nconst ShadowView: ShadowViewProps = styled(flexBoxDiv)`\n  box-shadow: 0px 0px 3px 1px\n    ${handlePrototype({ key: \"shadow\", def: \"orange\", sameAttribute: \"bgc\" })};\n  transition: all 0.3s linear;\n  border-radius: 0.5rem;\n\n  :hover {\n    box-shadow: 0px 0px 20px 3px\n      ${handlePrototype({\n        key: \"shadow\",\n        def: \"orange\",\n        sameAttribute: \"bgc\",\n      })};\n    filter: brightness(1.1);\n  }\n`;\n\ntype CardProps = StyledComponent<\n  React.FC<RFCDivProps & { shadow?: string; bgc?: string | undefined }>,\n  any,\n  {},\n  any\n>;\n\nexport const Card: any = styled(ShadowView)`\n  width: 10rem;\n  height: 10rem;\n  background-color: ${(props: { bgc?: string; theme?: any }) => {\n    console.log(props.theme);\n    return props.bgc || props.theme.color.primary;\n  }};\n  ${flexCenter};\n`;\n\ninterface SpanProps {\n  theme?: any;\n  shadow?: boolean;\n  bold?: boolean;\n  color?: string;\n  className?: string;\n  capitalize?: boolean;\n  uppercase?: boolean;\n  lowercase?: boolean;\n}\n\nconst RFCSpan: React.FC<SpanProps> = (props) => (\n  <span className={props.className}>{props.children}</span>\n);\n\nexport const Span = styled(RFCSpan)`\n  color: ${({ color }) => color || \"black\"};\n  font-size: 1rem;\n  font-weight: ${({ bold }) => (bold ? \"bold\" : undefined)};\n  ${({ shadow }) => (shadow ? textShadow : undefined)}\n  ${({ capitalize, uppercase }) =>\n    capitalize ? Capitalize : uppercase ? Uppercase : Lowercase}\n`;\n\nconst randomValue = () => Math.floor(Math.random() * 256);\n\nexport const randomColor = () =>\n  `rgba(${randomValue()},${randomValue()},${randomValue()})`;\n","/Users/hongbin/Code/React/bg-manage-system/src/components/constants/styled.tsx",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":80,"column":6,"nodeType":"33","messageId":"34","endLine":80,"endColumn":15},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'CardProps' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]